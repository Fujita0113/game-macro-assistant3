name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '8.0.x'
  WINAPPDRIVER_VERSION: '1.6.2'

jobs:
  test:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore GameMacroAssistant.sln
      
    - name: Build solution
      run: dotnet build GameMacroAssistant.sln --configuration Release --no-restore
      
    - name: Run unit tests with coverage
      run: |
        dotnet test GameMacroAssistant.sln `
          --configuration Release `
          --no-build `
          --verbosity normal `
          --collect:"XPlat Code Coverage" `
          --results-directory ./TestResults
          
    - name: Generate coverage report
      run: |
        dotnet tool install -g dotnet-reportgenerator-globaltool
        reportgenerator `
          -reports:"./TestResults/**/coverage.cobertura.xml" `
          -targetdir:"./CoverageReport" `
          -reporttypes:"Html;Cobertura"
          
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./CoverageReport/Cobertura.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Upload coverage report artifact
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: ./CoverageReport/
        
  ui-tests:
    runs-on: windows-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Install WinAppDriver (R-023)
      run: |
        choco install winappdriver --version ${{ env.WINAPPDRIVER_VERSION }} --yes
        
    - name: Wait for system stability (R-023)
      run: Start-Sleep -Seconds 5
      shell: powershell
      
    - name: Build test application
      run: |
        dotnet build src/GameMacroAssistant.Wpf/GameMacroAssistant.Wpf.csproj `
          --configuration Release
          
    - name: Start WinAppDriver
      run: |
        Start-Process -FilePath "C:\Program Files (x86)\Windows Application Driver\WinAppDriver.exe" `
          -ArgumentList "127.0.0.1 4723" `
          -WindowStyle Hidden
        Start-Sleep -Seconds 3
      shell: powershell
      
    - name: Run UI Tests
      run: |
        # TODO: Add UI test execution when Appium tests are implemented
        # dotnet test src/GameMacroAssistant.UITests/GameMacroAssistant.UITests.csproj --configuration Release
        Write-Host "UI tests would run here with WinAppDriver"
      shell: powershell
      
    - name: Stop WinAppDriver
      run: |
        Get-Process | Where-Object {$_.Name -eq "WinAppDriver"} | Stop-Process -Force
      shell: powershell
      if: always()
      
  coverage-check:
    runs-on: windows-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore and build
      run: |
        dotnet restore GameMacroAssistant.sln
        dotnet build GameMacroAssistant.sln --configuration Release --no-restore
        
    - name: Run tests with detailed coverage
      run: |
        dotnet test GameMacroAssistant.sln `
          --configuration Release `
          --no-build `
          --collect:"XPlat Code Coverage" `
          --results-directory ./TestResults `
          -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura
          
    - name: Install ReportGenerator
      run: dotnet tool install -g dotnet-reportgenerator-globaltool
      
    - name: Generate coverage report with threshold check
      run: |
        reportgenerator `
          -reports:"./TestResults/**/coverage.cobertura.xml" `
          -targetdir:"./CoverageReport" `
          -reporttypes:"Html;Cobertura;TextSummary" `
          -assemblies:"*GameMacroAssistant.Core*"
          
    - name: Check Core layer coverage (R-024)
      run: |
        $coverageFile = "./CoverageReport/Summary.txt"
        if (Test-Path $coverageFile) {
          $content = Get-Content $coverageFile
          $coreLineCoverage = ($content | Select-String "Line coverage:" | ForEach-Object { $_.Line.Split(':')[1].Trim().Replace('%','') }) -as [double]
          
          Write-Host "Core layer line coverage: $coreLineCoverage%"
          
          if ($coreLineCoverage -lt 80) {
            Write-Error "Core layer coverage ($coreLineCoverage%) is below required 80% threshold (R-024)"
            exit 1
          } else {
            Write-Host "✅ Core layer coverage requirement met: $coreLineCoverage% >= 80%"
          }
        } else {
          Write-Warning "Coverage summary file not found, skipping threshold check"
        }
      shell: powershell
      
  build-artifacts:
    runs-on: windows-latest
    needs: [test, coverage-check]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore GameMacroAssistant.sln
      
    - name: Build for release
      run: |
        dotnet build GameMacroAssistant.sln `
          --configuration Release `
          --no-restore
          
    - name: Publish application
      run: |
        dotnet publish src/GameMacroAssistant.Wpf/GameMacroAssistant.Wpf.csproj `
          --configuration Release `
          --output ./publish `
          --self-contained true `
          --runtime win-x64
          
    - name: Create release package
      run: |
        Compress-Archive -Path "./publish/*" -DestinationPath "GameMacroAssistant-win-x64.zip"
      shell: powershell
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: GameMacroAssistant-Release
        path: GameMacroAssistant-win-x64.zip
        
  performance-test:
    runs-on: windows-latest
    needs: build-artifacts
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: GameMacroAssistant-Release
        
    - name: Extract and test performance
      run: |
        Expand-Archive -Path "GameMacroAssistant-win-x64.zip" -DestinationPath "./app"
        
        # TODO: Add headless performance tests (R-025)
        # ./app/GameMacroAssistant.Wpf.exe --headless --test-performance
        
        Write-Host "Performance tests would run here with --headless option"
        
        # Verify performance thresholds (R-020)
        Write-Host "✅ Performance thresholds would be validated:"
        Write-Host "  - CPU usage ≤ 15%"
        Write-Host "  - Memory usage ≤ 300MB"
        Write-Host "  - Timing accuracy: avg ≤ 5ms, max ≤ 15ms"
      shell: powershell